// Generated by view binder compiler. Do not edit!
package com.example.fieldagent.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.fieldagent.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityCustDetailBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView AgeOfProperty;

  @NonNull
  public final TextView Amenities;

  @NonNull
  public final TextView Anynegativetothelocality;

  @NonNull
  public final TextView Colony;

  @NonNull
  public final TextView ContactPersonName;

  @NonNull
  public final TextView ContactPersonNumber;

  @NonNull
  public final TextView East;

  @NonNull
  public final TextView NearestBusStop;

  @NonNull
  public final TextView NearestHospital;

  @NonNull
  public final TextView NearestMetroStation;

  @NonNull
  public final TextView NearestRailwayStation;

  @NonNull
  public final TextView NeighborhoodType;

  @NonNull
  public final TextView North;

  @NonNull
  public final TextView OccupiedBy;

  @NonNull
  public final TextView OccupiedSince;

  @NonNull
  public final TextView Relationship;

  @NonNull
  public final TextView SelectedCity;

  @NonNull
  public final TextView SiteInspectionDate;

  @NonNull
  public final TextView South;

  @NonNull
  public final TextView West;

  @NonNull
  public final TextView address;

  @NonNull
  public final TextView address1;

  @NonNull
  public final TextView addressMatching;

  @NonNull
  public final TextView custLoantype;

  @NonNull
  public final TextView custName1;

  @NonNull
  public final TextView customerName;

  @NonNull
  public final TextView instituteName;

  @NonNull
  public final TextView landmark;

  @NonNull
  public final TextView locality;

  @NonNull
  public final TextView propertyAddressAsPerSite;

  @NonNull
  public final TextView widthofroad;

  private ActivityCustDetailBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView AgeOfProperty, @NonNull TextView Amenities,
      @NonNull TextView Anynegativetothelocality, @NonNull TextView Colony,
      @NonNull TextView ContactPersonName, @NonNull TextView ContactPersonNumber,
      @NonNull TextView East, @NonNull TextView NearestBusStop, @NonNull TextView NearestHospital,
      @NonNull TextView NearestMetroStation, @NonNull TextView NearestRailwayStation,
      @NonNull TextView NeighborhoodType, @NonNull TextView North, @NonNull TextView OccupiedBy,
      @NonNull TextView OccupiedSince, @NonNull TextView Relationship,
      @NonNull TextView SelectedCity, @NonNull TextView SiteInspectionDate, @NonNull TextView South,
      @NonNull TextView West, @NonNull TextView address, @NonNull TextView address1,
      @NonNull TextView addressMatching, @NonNull TextView custLoantype,
      @NonNull TextView custName1, @NonNull TextView customerName, @NonNull TextView instituteName,
      @NonNull TextView landmark, @NonNull TextView locality,
      @NonNull TextView propertyAddressAsPerSite, @NonNull TextView widthofroad) {
    this.rootView = rootView;
    this.AgeOfProperty = AgeOfProperty;
    this.Amenities = Amenities;
    this.Anynegativetothelocality = Anynegativetothelocality;
    this.Colony = Colony;
    this.ContactPersonName = ContactPersonName;
    this.ContactPersonNumber = ContactPersonNumber;
    this.East = East;
    this.NearestBusStop = NearestBusStop;
    this.NearestHospital = NearestHospital;
    this.NearestMetroStation = NearestMetroStation;
    this.NearestRailwayStation = NearestRailwayStation;
    this.NeighborhoodType = NeighborhoodType;
    this.North = North;
    this.OccupiedBy = OccupiedBy;
    this.OccupiedSince = OccupiedSince;
    this.Relationship = Relationship;
    this.SelectedCity = SelectedCity;
    this.SiteInspectionDate = SiteInspectionDate;
    this.South = South;
    this.West = West;
    this.address = address;
    this.address1 = address1;
    this.addressMatching = addressMatching;
    this.custLoantype = custLoantype;
    this.custName1 = custName1;
    this.customerName = customerName;
    this.instituteName = instituteName;
    this.landmark = landmark;
    this.locality = locality;
    this.propertyAddressAsPerSite = propertyAddressAsPerSite;
    this.widthofroad = widthofroad;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCustDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCustDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_cust_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCustDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Age_of_Property;
      TextView AgeOfProperty = ViewBindings.findChildViewById(rootView, id);
      if (AgeOfProperty == null) {
        break missingId;
      }

      id = R.id.Amenities;
      TextView Amenities = ViewBindings.findChildViewById(rootView, id);
      if (Amenities == null) {
        break missingId;
      }

      id = R.id.Anynegativetothelocality;
      TextView Anynegativetothelocality = ViewBindings.findChildViewById(rootView, id);
      if (Anynegativetothelocality == null) {
        break missingId;
      }

      id = R.id.Colony;
      TextView Colony = ViewBindings.findChildViewById(rootView, id);
      if (Colony == null) {
        break missingId;
      }

      id = R.id.Contact_person_name;
      TextView ContactPersonName = ViewBindings.findChildViewById(rootView, id);
      if (ContactPersonName == null) {
        break missingId;
      }

      id = R.id.Contact_person_Number;
      TextView ContactPersonNumber = ViewBindings.findChildViewById(rootView, id);
      if (ContactPersonNumber == null) {
        break missingId;
      }

      id = R.id.East;
      TextView East = ViewBindings.findChildViewById(rootView, id);
      if (East == null) {
        break missingId;
      }

      id = R.id.NearestBusStop;
      TextView NearestBusStop = ViewBindings.findChildViewById(rootView, id);
      if (NearestBusStop == null) {
        break missingId;
      }

      id = R.id.NearestHospital;
      TextView NearestHospital = ViewBindings.findChildViewById(rootView, id);
      if (NearestHospital == null) {
        break missingId;
      }

      id = R.id.NearestMetroStation;
      TextView NearestMetroStation = ViewBindings.findChildViewById(rootView, id);
      if (NearestMetroStation == null) {
        break missingId;
      }

      id = R.id.NearestRailwayStation;
      TextView NearestRailwayStation = ViewBindings.findChildViewById(rootView, id);
      if (NearestRailwayStation == null) {
        break missingId;
      }

      id = R.id.NeighborhoodType;
      TextView NeighborhoodType = ViewBindings.findChildViewById(rootView, id);
      if (NeighborhoodType == null) {
        break missingId;
      }

      id = R.id.North;
      TextView North = ViewBindings.findChildViewById(rootView, id);
      if (North == null) {
        break missingId;
      }

      id = R.id.Occupied_by;
      TextView OccupiedBy = ViewBindings.findChildViewById(rootView, id);
      if (OccupiedBy == null) {
        break missingId;
      }

      id = R.id.OccupiedSince;
      TextView OccupiedSince = ViewBindings.findChildViewById(rootView, id);
      if (OccupiedSince == null) {
        break missingId;
      }

      id = R.id.Relationship;
      TextView Relationship = ViewBindings.findChildViewById(rootView, id);
      if (Relationship == null) {
        break missingId;
      }

      id = R.id.Selected_city;
      TextView SelectedCity = ViewBindings.findChildViewById(rootView, id);
      if (SelectedCity == null) {
        break missingId;
      }

      id = R.id.SiteInspectionDate;
      TextView SiteInspectionDate = ViewBindings.findChildViewById(rootView, id);
      if (SiteInspectionDate == null) {
        break missingId;
      }

      id = R.id.South;
      TextView South = ViewBindings.findChildViewById(rootView, id);
      if (South == null) {
        break missingId;
      }

      id = R.id.West;
      TextView West = ViewBindings.findChildViewById(rootView, id);
      if (West == null) {
        break missingId;
      }

      id = R.id.address;
      TextView address = ViewBindings.findChildViewById(rootView, id);
      if (address == null) {
        break missingId;
      }

      id = R.id.address1;
      TextView address1 = ViewBindings.findChildViewById(rootView, id);
      if (address1 == null) {
        break missingId;
      }

      id = R.id.address_matching;
      TextView addressMatching = ViewBindings.findChildViewById(rootView, id);
      if (addressMatching == null) {
        break missingId;
      }

      id = R.id.cust_loantype;
      TextView custLoantype = ViewBindings.findChildViewById(rootView, id);
      if (custLoantype == null) {
        break missingId;
      }

      id = R.id.cust_name1;
      TextView custName1 = ViewBindings.findChildViewById(rootView, id);
      if (custName1 == null) {
        break missingId;
      }

      id = R.id.customer_name;
      TextView customerName = ViewBindings.findChildViewById(rootView, id);
      if (customerName == null) {
        break missingId;
      }

      id = R.id.institute_name;
      TextView instituteName = ViewBindings.findChildViewById(rootView, id);
      if (instituteName == null) {
        break missingId;
      }

      id = R.id.landmark;
      TextView landmark = ViewBindings.findChildViewById(rootView, id);
      if (landmark == null) {
        break missingId;
      }

      id = R.id.locality;
      TextView locality = ViewBindings.findChildViewById(rootView, id);
      if (locality == null) {
        break missingId;
      }

      id = R.id.property_address_as_per_site;
      TextView propertyAddressAsPerSite = ViewBindings.findChildViewById(rootView, id);
      if (propertyAddressAsPerSite == null) {
        break missingId;
      }

      id = R.id.widthofroad;
      TextView widthofroad = ViewBindings.findChildViewById(rootView, id);
      if (widthofroad == null) {
        break missingId;
      }

      return new ActivityCustDetailBinding((ConstraintLayout) rootView, AgeOfProperty, Amenities,
          Anynegativetothelocality, Colony, ContactPersonName, ContactPersonNumber, East,
          NearestBusStop, NearestHospital, NearestMetroStation, NearestRailwayStation,
          NeighborhoodType, North, OccupiedBy, OccupiedSince, Relationship, SelectedCity,
          SiteInspectionDate, South, West, address, address1, addressMatching, custLoantype,
          custName1, customerName, instituteName, landmark, locality, propertyAddressAsPerSite,
          widthofroad);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
